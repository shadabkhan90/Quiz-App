INSERT INTO QUESTION (question_text, optionA, optionB, optionC, optionD, correct_answer) VALUES
('What is the capital of France?', 'London', 'Berlin', 'Paris', 'Madrid', 'Paris'),
('Which planet is known as the Red Planet?', 'Venus', 'Mars', 'Jupiter', 'Saturn', 'Mars'),
('What is 2 + 2?', '3', '4', '5', '6', '4'),
('Which annotation is used to create a RESTful controller in Spring Boot?', '@Controller', '@RestController', '@Service', '@Repository', '@RestController'),
('What is the default scope of a Spring Bean?', 'Prototype', 'Singleton', 'Request', 'Session', 'Singleton'),
('Which of these is not a feature of Java?', 'Platform Independence', 'Multiple Inheritance', 'Object-Oriented', 'Automatic Memory Management', 'Multiple Inheritance'),
('What is the parent class of all classes in Java?', 'String', 'Main', 'Object', 'Class', 'Object'),
('Which Spring Boot annotation is used to map HTTP POST requests?', '@PostMapping', '@RequestMapping', '@Post', '@HTTPPost', '@PostMapping'),
('What is the purpose of @Autowired annotation in Spring?', 'To create a new object', 'For dependency injection', 'To map URLs', 'To configure database', 'For dependency injection'),
('Which collection type in Java does not allow duplicate elements?', 'ArrayList', 'LinkedList', 'Set', 'Vector', 'Set'),
('What is the correct way to declare a constant in Java?', 'constant int NUM', 'final int NUM', 'const int NUM', 'static int NUM', 'final int NUM'),
('Which Spring Boot starter is used for building web applications?', 'spring-boot-starter', 'spring-boot-starter-web', 'spring-boot-starter-tomcat', 'spring-boot-web', 'spring-boot-starter-web'),
('What is the purpose of JPA in Spring Boot?', 'JavaScript Processing', 'Java Persistence API', 'Java Processing Application', 'Java Platform API', 'Java Persistence API'),
('In Spring Boot, which of the following is true about @RestController? \nA) It combines @Controller and @ResponseBody \nB) It only works with XML responses \nC) It requires explicit @ResponseBody on each method \nD) It cannot handle JSON responses', 
'It only works with XML responses', 
'It combines @Controller and @ResponseBody', 
'It requires explicit @ResponseBody on each method', 
'It cannot handle JSON responses', 
'It combines @Controller and @ResponseBody'),

('What will be the output of the following Java code?\npublic class Test {\n    public static void main(String[] args) {\n        String str = null;\n        System.out.println(str.length());\n    }\n}',
'0', 
'null', 
'NullPointerException will be thrown', 
'Compilation Error', 
'NullPointerException will be thrown'),

('Which Spring Boot annotation is used for configuring application properties with a prefix? For example: mail.host, mail.port\nA) @ConfigurationPrefix\nB) @ConfigurationProperties\nC) @PropertyPrefix\nD) @PropertySource',
'@ConfigurationPrefix', 
'@ConfigurationProperties', 
'@PropertyPrefix', 
'@PropertySource', 
'@ConfigurationProperties'),

('What is the output of this Java code?\nList<String> list = Arrays.asList("A", "B", "C");\nlist.add("D");\nSystem.out.println(list);',
'[A, B, C, D]', 
'UnsupportedOperationException will be thrown', 
'[A, B, C]', 
'Compilation Error', 
'UnsupportedOperationException will be thrown'),

('In Spring Boot JPA, what is the difference between findById() and getById()?\nA) No difference, they are identical\nB) findById returns Optional, getById returns entity directly\nC) findById is eager, getById is lazy\nD) findById is deprecated',
'No difference, they are identical', 
'findById returns Optional, getById returns entity directly', 
'findById is eager, getById is lazy', 
'findById is deprecated', 
'findById returns Optional, getById returns entity directly'),

('What will be the output of:\nString s1 = "Hello";\nString s2 = new String("Hello");\nSystem.out.println(s1 == s2);\nSystem.out.println(s1.equals(s2));',
'true true', 
'false false', 
'true false', 
'false true', 
'false true'),

('Which annotation is used in Spring Boot to handle HTTP request parameters?\nA) @RequestParam\nB) @PathParam\nC) @QueryParam\nD) @Param',
'@RequestParam', 
'@PathParam', 
'@QueryParam', 
'@Param', 
'@RequestParam'),

('What is the output of:\nint[] arr = {1, 2, 3, 4, 5};\nfor(int i = 0; i < 5; i++) {\n    if(i == 2) continue;\n    System.out.print(arr[i]);\n}',
'1245', 
'1234', 
'12345', 
'1235', 
'1245'),

('In Spring Boot, what is the purpose of @Transactional annotation?\nA) For database transactions\nB) For HTTP transactions\nC) For file operations\nD) For email transactions',
'For database transactions', 
'For HTTP transactions', 
'For file operations', 
'For email transactions', 
'For database transactions'),

('What happens when you try to serialize a static field in Java?\nA) Serialized normally\nB) Not serialized\nC) Throws exception\nD) Depends on field type',
'Serialized normally', 
'Not serialized', 
'Throws exception', 
'Depends on field type', 
'Not serialized'); 